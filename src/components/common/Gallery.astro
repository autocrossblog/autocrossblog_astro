---
import fs from 'fs';
import path from 'path';
import exifParser from 'exif-parser';
import PhotoSwipeInit from './PhotoSwipeInit.astro';
import { getImage } from 'astro:assets';
import 'photoswipe/dist/photoswipe.css';

// Props
const { galleryPath } = Astro.props;

if (!galleryPath) {
  return null;
}

const imagesDirectory = path.resolve('.' + galleryPath);
const importedImages = import.meta.glob('/src/assets/images/**/*.{jpg,jpeg,png,webp}', { eager: true });

let imagesWithMetadata = [];
try {
  const imageFiles = fs
    .readdirSync(imagesDirectory)
    .filter((file) => /\.(jpg|jpeg|png|webp)$/i.test(file));

  imagesWithMetadata = await Promise.all(
    imageFiles.map(async (file) => {
      const imagePath = `${galleryPath}/${file}`;
      const importedImage = importedImages[imagePath];

      if (!importedImage) {
        console.error(`Failed to import image: ${imagePath}`);
        return null;
      }

      const buffer = fs.readFileSync(path.resolve('.' + imagePath));
      const exif = exifParser.create(buffer).parse();

      // Generate multiple sizes
      const thumbnail = await getImage({ src: imagePath, width: 200, height: 200, format: 'webp' });
      const fullImage1 = await getImage({ src: imagePath, width: 400, height: 266, format: 'webp' });
      const fullImage2 = await getImage({ src: imagePath, width: 800, height: 533, format: 'webp' });
      const fullImage3 = await getImage({ src: imagePath, width: 1600, height: 1066, format: 'webp' });
      const fullImage4 = await getImage({ src: imagePath, width: 2000, height: 1333, format: 'webp' });

      return {
        thumbnail: {
          src: thumbnail.src,
          width: thumbnail.width,
          height: thumbnail.height,
        },
        fullImage: {
          src: fullImage4.src,
          width: fullImage4.width,
          height: fullImage4.height,
          srcset: `${fullImage1.src} 400w, ${fullImage2.src} 800w, ${fullImage3.src} 1600w, ${fullImage4.src} 2000w`,
        },
        alt: exif.tags.ImageDescription || `Image ${file}`,
      };
    })
  );
} catch (err) {
  console.error(`Error reading directory: ${imagesDirectory}`, err);
}
---

<div class="gallery">
  {imagesWithMetadata.length > 0 ? (
    imagesWithMetadata.map((image, index) => (
      <div class="gallery-item" key={index}>
        <a
          href={image.fullImage.src}
          data-pswp-width={image.fullImage.width}
          data-pswp-height={image.fullImage.height}
          data-srcset={image.fullImage.srcset} 
          data-index={index}
        >
          <img
            src={image.thumbnail.src}
            alt={image.alt || 'Image'}
            width={image.thumbnail.width}
            height={image.thumbnail.height}
            style={{ maxWidth: '100%', objectFit: 'cover' }}
            loading="lazy"
          />
        </a>
        <p class="gallery-caption">{image.alt || 'No caption available'}</p>
      </div>
    ))
  ) : (
    <p>No images available for the gallery.</p>
  )}
</div>

<!-- PhotoSwipe Root -->
<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="pswp__bg"></div>
  <div class="pswp__scroll-wrap">
    <div class="pswp__container">
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>
    <div class="pswp__ui pswp__ui--hidden">
      <div class="pswp__top-bar">
        <button type="button" class="pswp__button pswp__button--close" aria-label="Close"></button>
        <button type="button" class="pswp__button pswp__button--zoom" aria-label="Zoom"></button>
        <div class="pswp__counter"></div>
      </div>
    </div>
  </div>
</div>

<PhotoSwipeInit />
