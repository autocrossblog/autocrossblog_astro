---
// Import required modules
import path from 'path';
import fs from 'fs/promises';
import 'photoswipe/dist/photoswipe.css';
import { generateGalleryImages } from '~/utils/images';
import exifParser from 'exif-parser';
import PhotoSwipeInit from '~/components/common/PhotoSwipeInit.astro';

// Extract the gallery path from Astro props
const { galleryPath } = Astro.props;

if (!galleryPath) {
  return null; // Exit early if no gallery path is provided
}

// Define paths and configurations
const imagesDirectory = path.resolve(`.${galleryPath}`);
const generatedImagesPath = path.join('./generated-images', galleryPath.replace('/src/assets/images', ''));
const publicGalleryPath = path.join('./public/assets/images', galleryPath.replace('/src/assets/images', ''));
const breakpoints = [400, 768, 1024, 2040]; // Define responsive widths
// widths={[400, 768, 1024, 2040]}
// sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"

const format = 'webp'; // Desired image format
let imagesWithMetadata = [];

try {
  // Ensure generated-images directory exists
  await fs.mkdir(generatedImagesPath, { recursive: true });

  // Read image files from the directory
  const imageFiles = (await fs.readdir(imagesDirectory)).filter((file) =>
    /\.(jpg|jpeg|png|webp)$/i.test(file)
  );

  // Process each image and generate metadata
  imagesWithMetadata = await Promise.all(
    imageFiles.map(async (file) => {
      const srcPath = path.join(imagesDirectory, file);
      const outputDir = path.join(generatedImagesPath, path.dirname(file));
      const publicOutputDir = path.join(publicGalleryPath, path.dirname(file));
      const fileName = path.parse(file).name;

      // Read EXIF metadata
      const buffer = await fs.readFile(srcPath);
      const exif = exifParser.create(buffer).parse();

      const title = exif.tags?.ImageDescription || `Image: ${fileName}`;
      const description = exif.tags?.ImageDescription || 'No description available.';

      // Generate responsive image sizes and copy them to public/assets/images
      const resizedImages = await generateGalleryImages(srcPath, breakpoints, format, outputDir, publicOutputDir);

      if (!resizedImages.images.length) {
        console.warn(`No resized images found for: ${file}`);
        return null;
      }

      return {
        thumbnail: {
          path: `/assets/images${galleryPath.replace('/src/assets/images', '')}/${resizedImages.images[0].path.split('/').pop()}`,
          width: resizedImages.images[0].width,
          height: resizedImages.images[0].height,
        },
        fullImage: {
          path: `/assets/images${galleryPath.replace('/src/assets/images', '')}/${resizedImages.images[resizedImages.images.length - 1].path.split('/').pop()}`,
          width: resizedImages.images[resizedImages.images.length - 1].width,
          height: resizedImages.images[resizedImages.images.length - 1].height,
        },
        title,
        description,
        alt: title, // Use title as alt text
        srcset: resizedImages.srcset, // Add the `srcset` for responsive images
      };
    })
  );

  // Remove null entries (failed processing)
  imagesWithMetadata = imagesWithMetadata.filter(Boolean);
} catch (error) {
  console.error(`Error processing gallery images from ${galleryPath}:`, error);
}
---

<div class="gallery">
  {imagesWithMetadata.length > 0 ? (
    imagesWithMetadata.map((image, index) => (
      <div class="gallery-item" key={index}>
        <a
          href={image.fullImage.path}
          data-pswp-width={image.fullImage.width}
          data-pswp-height={image.fullImage.height}
          data-pswp-description={image.description}
          data-srcset={image.srcset}
        >
          <img
            src={image.thumbnail.path}
            alt={image.alt}
            width={image.thumbnail.width}
            height={image.thumbnail.height}
            loading="lazy"
            srcset={image.srcset}
            sizes="(max-width: 768px) 90vw, (max-width: 1200px) 50vw, 30vw"
          />
        </a>
        <p class="gallery-title">{image.title}</p>
      </div>
    ))
  ) : (
    <p>No images available for the gallery.</p>
  )}
</div>

<PhotoSwipeInit />
